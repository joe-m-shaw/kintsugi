---
title: "Ovarian Cancer Service Data for Publication"
author: "Joe Shaw (CS20980)"
toc: true
date: today
date-format: "DD-MM-YYYY"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
editor: visual
---

```{r}
#| label: packages
#| warning: FALSE
#| message: FALSE

library(kintsugi)
library(tidyverse)
library(janitor)

```

# Introduction

This is a data review for the ovarian cancer testing service which will provide data for Dr Rob Morgan.

Dr Morgan would like the data meeting the following criteria:

-   Data from genomic instability (GI) testing performed at the North West Genomic Laboratory Hub (GLH) using the SeqOne SomaHRD pipeline
-   Ovarian cancer samples only
-   Patients only (no external quality assessment samples or controls)
-   One GI result per patient
-   Data from the live service only (no data from validation work)
-   Data generated between December 2023 to October 2025
-   Data from somatic variant testing for genetic variants in *BRCA1* and *BRCA2*

Dr Morgan originally also requested data on germline testing for *BRCA1* and *BRCA2*. Germline testing data is now no longer required for this publication, but the code for collating germline data has been left to allow easier collation for the next publication.

# Methods

Preparing this data requires multiple steps and uses the `kintsugi` package. 
For each step I have included explanatory text alongside the R code.

Here is an overview of the approach I have taken:

-   Collate all GI data from individual csv (comma separated value) files saved on the internal S drive at the North West GLH
-   Remove samples tested for validation purposes and external quality assessment
-   Remove data from repeated samples
-   Identify somatic and germline tests results for these patients on both DNA Database and iGene.
-   Clean the somatic and germline test data from DNA Database and iGene so that they can be joined together as single tables: all somatic test results in one table, all germline test results in another table.
-   Join the datasets together to create the final table to send to Dr Morgan.

## Naming convention

I have used the following naming convention for ovarian cancer testing terms:

-   gi: Genomic Instability

-   glvar: Germline variants

-   tvar: Tumour variants

This is explained in more detail in the `naming_convention.qmd` vignette in the `kintsugi` package.

## Collate data from SeqOne csv files

Define the folder path and file structure for this review.

```{r}
#| label: filepaths

ovarian_cancer_folder <- "S:/central shared/Genetics/Mol_Shared/Development.Team/kintsugi_ovarian_cancer/"

initial_folder <- paste0(ovarian_cancer_folder, "01_initial/")

cleaned_folder <- paste0(ovarian_cancer_folder, "02_cleaned/")

joined_folder <- paste0(ovarian_cancer_folder, "03_joined/")

seqone_gi_csv_folder <- paste0(initial_folder, "seqone_gi_csvs/")

```

Identify worksheet numbers and file locations for all SeqOne GI testing at the North West GLH. Results are exported from the SeqOne website as csv files and saved in folders named after the worksheet identifier.

```{r}
#| label: find-seqone-files

gi_ws_filepaths <- list_seqone_gi_csv()[[1]]

```

`r length(gi_ws_filepaths)` GI csv files have been identified.

Collate GI results by reading the first line of each csv file. 
Two files are excluded from this process (WS144728_24045060 and WS144728_24044787) as they were from a failed pipeline run and have NA values for several variables. 
These samples were successfully re-analysed.

The data is restricted to data collected before 2025-10-20.

```{r}
#| label: collate-seqone-data

gi_csv_bind <- bind_seqone_gi_csv(filepaths = gi_ws_filepaths,
                   folder = seqone_gi_csv_folder)

gi_csv_bind_pre_oct2025 <- gi_csv_bind |> 
  filter(date < "2025-10-20 00:00:00")

gi_csv_duplicates <- gi_csv_bind_pre_oct2025 |> 
  filter(duplicated(labno))

```

There are `r nrow(gi_csv_duplicates)` samples with more than one SeqOne GI csv result.

Get information (iGene R number, iGene S number, first name, surname, NHS number and pathology block identifier) from DNA Database for each DNA laboratory number.

```{r}
#| label: get-gi-patient-info

gi_labnos <- unique(gi_csv_bind_pre_oct2025$labno)

gi_ids <- collect_ids_by_vector(query_col = "labno",
                                query_vector = gi_labnos,
                                output_cols = c("labno", 
                                                  "i_gene_r_no", 
                                                  "i_gene_s_no", 
                                                  "firstname", 
                                                  "surname", 
                                                  "nhsno", 
                                                  "pathno",
                                                  "comments"))

gi_csv_collated_patient_info <- gi_csv_bind_pre_oct2025 |> 
  left_join(gi_ids, by = "labno",
            # One lab number can have multiple GI results, but should only
            # have one NHS number
            relationship = "many-to-one") |> 
  relocate(labno, i_gene_r_no, i_gene_s_no,
           surname, firstname, nhsno, pathno, comments) |> 
  rename(rno = i_gene_r_no,
         sno = i_gene_s_no)

stopifnot(anyNA(gi_csv_collated_patient_info$firstname) == FALSE)

```

Annotate the collated data to identify samples which are not from patients (GenQA and SeraCare control samples) and samples which were run for validation purposes.

This is a complicated step as there is no consistent way that EQA samples are identified (some are named "EQA" whilst others have fake patient names).

```{r}
#| label: annotate-validation-data

validation_ws = c(# DOC6192
                  "WS133557", "WS134687", "WS134928", 
                  "WS135001", "WS135498",
                  # DOC6255
                  "WS136827", "WS138201", "WS138439", 
                  "WS138627",
                  # DOC6588
                  "WS147582", "WS149085", "WS149086")

gi_csv_collated_validation_info <- gi_csv_collated_patient_info |> 
    mutate(service_validation = case_when(
      worksheet %in% validation_ws ~"validation",
      # 2 validation samples were on WS138061. The other samples on this
      # worksheet were live clinical samples
      (worksheet == "WS138061" & 
         labno %in% c("23047082", "23053359")) ~"validation",
      TRUE ~"service"
    ),
    full_name = paste0(firstname, " ", surname),
    patient_non_patient = case_when(
      grepl(pattern = "Seraseq|GenQA",
            x = full_name) ~"non-patient",
      # EQA samples in the HRD Ring Trial (HRDRT)
      grepl(pattern = "HRDRT",
            x = pathno) ~"non-patient",
      # HRDRT8 not written in pathno section on DNA Database
      labno == "24011931" ~"non-patient",
      TRUE ~"patient"
    ))

patients_without_nhsno <- gi_csv_collated_validation_info |> 
  filter(patient_non_patient == "patient" &
           is.na(nhsno))

non_patient_samples <- gi_csv_collated_validation_info |> 
  filter(patient_non_patient == "non-patient")

```

There are `r nrow(patients_without_nhsno)` samples from patients which do not have an NHS number. These are removed from the dataset because it is not possible to link them to other test results.

There are `r nrow(non_patient_samples)` samples from EQA schemes or synthetic controls. These are also removed from the dataset.

Filter results to only include patient samples tested on the live service, and filter results to one result per patient. 

To select samples with conclusive results (positive or negative GI statuses), arrange by NHS number and status and then remove NHS number duplicates.

```{r}
#| label: filter-one-result-per-patient

gi_csv_cleaned_orpp <- gi_csv_collated_validation_info |> 
  filter(!is.na(nhsno) &
           service_validation == "service" &
           patient_non_patient == "patient") |> 
  arrange(nhsno, status) |> 
  filter(!duplicated(nhsno))

if(length(grep(pattern = "[[:digit:]]",
               gi_csv_cleaned_orpp$full_name)) != 0){
  stop("Some patient names contain numbers")
}

stopifnot(length(grep(pattern = "EQA", x = gi_csv_cleaned_orpp$comments,
     ignore.case = TRUE,
     value = TRUE)) == 0)

stopifnot(!"24021675" %in% gi_csv_cleaned_orpp$labno) # Seraseq control

stopifnot(unique(gi_csv_cleaned_orpp$patient_non_patient) == "patient")

stopifnot(unique(gi_csv_cleaned_orpp$service_validation) == "service")

stopifnot(anyDuplicated(gi_csv_cleaned_orpp$labno) == 0)

stopifnot(anyDuplicated(gi_csv_cleaned_orpp$nhsno) == 0)

```

Check the DNA lab number with a conclusive result has been selected for patients with multiple samples including non-conclusive results

```{r}
#| label: check-samples-with-multiple-results

stopifnot(nrow(gi_csv_cleaned_orpp[gi_csv_cleaned_orpp$labno == "24044667" &
                           gi_csv_cleaned_orpp$status == "Negative",]) == 1)

stopifnot(nrow(gi_csv_cleaned_orpp[gi_csv_cleaned_orpp$labno == "24032495" &
                           gi_csv_cleaned_orpp$status == "Negative",]) == 1)

stopifnot(nrow(gi_csv_cleaned_orpp[gi_csv_cleaned_orpp$labno == "24045338" &
                          gi_csv_cleaned_orpp$status == "Negative",]) == 1)

stopifnot(nrow(gi_csv_cleaned_orpp[gi_csv_cleaned_orpp$labno == "24064756" &
                          gi_csv_cleaned_orpp$status == "Positive",]) == 1)

stopifnot(nrow(gi_csv_cleaned_orpp[gi_csv_cleaned_orpp$labno == "25030664" &
                          gi_csv_cleaned_orpp$status == "Positive",]) == 1)

```

Filter to one result per sample (i.e. one result per DNA lab number).

```{r}
#| label: filter-one-result-per-sample

gi_csv_cleaned_orps <- gi_csv_collated_validation_info |> 
  filter(service_validation == "service" &
           patient_non_patient == "patient") |> 
  arrange(labno, status) |> 
  filter(!duplicated(labno))

stopifnot(anyDuplicated(gi_csv_cleaned_orps$labno) == 0)

stopifnot(nrow(gi_csv_cleaned_orps[gi_csv_cleaned_orps$labno == "24045060" &
                      gi_csv_cleaned_orps$status == "Positive",]) == 1)

```

Export GI data to folder.

```{r}
#| label: export-data

write_csv(gi_csv_collated_validation_info,
          paste0(cleaned_folder,
                 "gi_csv_cleaned.csv"))

write_csv(gi_csv_cleaned_orpp,
          paste0(cleaned_folder,
                 "gi_csv_cleaned_orpp.csv"))

write_csv(gi_csv_cleaned_orps,
          paste0(cleaned_folder,
                 "gi_csv_cleaned_orps.csv"))

```

## Collate data from DNA Database

Define the patients tested with the SeqOne GI method using their NHS numbers. Then extract all the DNA lab numbers recorded under those NHS numbers in DNA database.

```{r}
#| label: find-all-patient-lab-numbers

gi_nhsnos <- gi_csv_cleaned_orpp$nhsno

labno_df <- collect_ids_by_vector(query_col = "nhsno",
                                  query_vector = gi_nhsnos,
                                  output_cols = c("labno", "nhsno"))

stopifnot(length(setdiff(unique(labno_df$nhsno), gi_nhsnos)) == 0)
stopifnot(anyNA.data.frame(labno_df) == FALSE)

labno_query <- unique(labno_df$labno)

```

There are SeqOne GI results for `r length(gi_nhsnos)` unique patients, based on their NHS numbers. `r nrow(labno_df)` different DNA numbers have been found which are linked to these NHS numbers.

```{r}
#| label: result-tbl

dnadb_results <- collect_results_by_vector(query_col = "labno",
                                           query_vector = labno_query) |> 
  rename(pcrid = resultsid)
  
stopifnot(nrow(dnadb_results) != 0)

```

### Germline BRCA testing

Find DNA Database results that are from Inherited Cancer Panel (ICP) testing. This is done using the "test" column of the "ResultsAccess" table, which is free type - there are many different ways that ICP testing has been written.

```{r}
#| label: identify-glvar-results

glvar_dnadb_extracted <- collect_results_by_vector(query_col = "test",
                                                 query_vector = descriptions_icp()) |> 
  filter(labno %in% labno_query) |> 
  left_join(labno_df, by = "labno") |> 
  relocate(nhsno)

```

`r length(unique(descriptions_icp()))` different ways have been found that the ICP panel has been described. In total, `r nrow(glvar_dnadb_extracted)` germline results have been found on DNA Database. These results range from `r format.Date(x = min(glvar_dnadb_extracted$genodate), format = "%d %B %Y")` to `r format.Date(x = max(glvar_dnadb_extracted$genodate), format = "%d %B %Y")`.

### Tumour BRCA testing

```{r}
#| label: identify-tbrca-results

tvar_dnadb_extracted <- collect_results_by_vector(query_col = "test",
                                                 query_vector = descriptions_pansolid()) |> 
  filter(labno %in% labno_query) |>
  left_join(labno_df, by = "labno") |> 
  relocate(nhsno)

stopifnot(anyNA.data.frame(tvar_dnadb_extracted) == FALSE)

```

Find results for tumour *BRCA* testing on the PanSolid next generation sequencing panel. There are `r length(unique(descriptions_pansolid()))` different ways that tumour *BRCA* testing has been described, and `r nrow(tvar_dnadb_extracted)` results have been found on DNA Database, ranging from `r format.Date(x = min(tvar_dnadb_extracted$genodate), format = "%d %B %Y")` to `r format.Date(x = max(tvar_dnadb_extracted$genodate), format = "%d %B %Y")`.

```{r}
#| label: export-dnadb-glvar-tvar-data
#| include: FALSE

write_csv(glvar_dnadb_extracted,
          paste0(initial_folder,
            "glvar_dnadb_extracted.csv"))

write_csv(tvar_dnadb_extracted,
          paste0(initial_folder,
            "tvar_dnadb_extracted.csv"))

```

## Collate data from iGene

iGene data can be accessed on the SQL Server using the "Eval_HRD" table which has been prepared by Des Halligan and Ryan Lam.

This table includes data from the following somatic variant panels:

-   M2_tBRCA_PS
-   M2_tBRCA_PS v2.a
-   M2_tBRCA_PS v2.b

There are some panels which a minority of patients receive, such as "OvarianEXT_PS v2.b" and "M119_PAEDEXT_PS". Results from these panels are not included in this analysis.

```{r}
#| label: eval-hrd

eval_hrd <- connect_to_eval_hrd()

```

Restructure the data into wider format.

```{r}
#| label: extract-tvar-and-glvar-results

glvar_igene <- pivot_wider_by_test(df = eval_hrd,
                              test_vector = c("PANEL: R207.1 - Inherited ovarian cancer (without breast cancer) v4.0 (ICP)"), 
                              names_prefix = "glvar")

stopifnot(ncol(glvar_igene) == 23)

tvar_igene <- pivot_wider_by_test(df = eval_hrd,
                             test_vector = c("PANEL: M2_tBRCA_PS",
                                             "PANEL: M2_tBRCA_PS v2.a",
                                             "PANEL: M2_tBRCA_PS v2.b"), 
                             names_prefix = "tvar")

gi_igene <- pivot_wider_by_test(df = eval_hrd,
                          test_vector = c("PANEL: M2.5 - SeqOne HRD Status"), 
                          names_prefix = "gi")


```

Check that no data has been lost during the previous step.

```{r}
#| label: perform-checks

tests_in_eval_hrd <- unique(eval_hrd$test_identifier)

tests_in_wide_tables <- c(unique(glvar_igene$test_identifier),
                          unique(tvar_igene$test_identifier),
                          unique(gi_igene$test_identifier))

# Check no tests have been lost from the dataset
stopifnot(length(setdiff(tests_in_eval_hrd, tests_in_wide_tables)) == 0)

```

Remove any entries which do not have "headline results" which indicates that the results have not yet been authorised.

```{r}
#| label: remove-entries-without-headlines

glvar_igene_na <- glvar_igene |> 
  filter(is.na(glvar_headline_result))

glvar_igene_no_na <- glvar_igene |> 
  filter(!is.na(glvar_headline_result))

tvar_igene_na <- tvar_igene |> 
  filter(is.na(tvar_headline_result))

tvar_igene_no_na <- tvar_igene |> 
  filter(!is.na(tvar_headline_result))

```

`r nrow(glvar_igene_na)` germline entries with no headline result were removed.

`r nrow(tvar_igene_na)` tumour entries with no headline result were removed.

iGene germline variant data ranges from `r format.Date(x = min(glvar_igene_no_na$test_order_date), format = "%d %B %Y")` to `r format.Date(x = max(glvar_igene_no_na$test_order_date), format = "%d %B %Y")`.

iGene tumour variant data ranges from `r format.Date(x = min(tvar_igene_no_na$test_order_date), format = "%d %B %Y")` to `r format.Date(x = max(tvar_igene_no_na$test_order_date), format = "%d %B %Y")`.

Export the data.

```{r}
#| label: export-igene-results

write_csv(glvar_igene_no_na,
          paste0(initial_folder,
                 "glvar_igene_extracted.csv"))

glvar_igene_extracted <- glvar_igene_no_na

write_csv(tvar_igene_no_na,
          paste0(initial_folder,
                 "tvar_igene_extracted.csv"))

tvar_igene_extracted <- tvar_igene_no_na

```

## Clean DNA Database data

There are important differences between variant data in DNA Database and in iGene:

1.  iGene includes variant classifications whilst DNA Database does not.

2.  iGene includes a "headline result" column which includes what result was reported, whilst DNA Database does not.

3.  DNA Database has a single free-type "genotype" column which holds multiple different pieces of data, whilst iGene splits this information into different columns.

4. The "genotype" column of DNA Database was sometimes used to record variants which were not included on the final report.

### Germline BRCA testing

Annotate variant classifications to DNA Database germline results. To do this I had to manually check each DNA Database report to check what the classification of each variant was.

This step is complicated as the "genotype" column contains information about multiple variants, including single nucleotide variants (SNVs) and copy number variants (CNVs).

```{r}
#| label: add-glvar-classifications

glvar_classifications <- read_csv(paste0(initial_folder,
                                         "glvar_classifications.csv"),
                                  show_col_types = FALSE)

stopifnot(anyDuplicated(glvar_classifications$glvar_seqv1_description) == 0)

glvar_dnadb_classifications <- glvar_dnadb_extracted |> 
  mutate(
    # Split the "genotype" field into SNV and CNV results
    glvar_snv_result = str_extract(string = genotype,
                                        pattern = "(.*);(.*)",
                                        group = 1),
    glvar_cnv_result = str_extract(string = genotype,
                                        pattern = "(.*);(.*)",
                                        group = 2),
    # Correct input for sample 18028742 - checked against report
    glvar_snv_result = case_when(
      labno == "18028742" &
        glvar_snv_result == "BRCA1 Exon 3 3 Copies" ~"No pathogenic variant identified",
      TRUE ~glvar_snv_result
    ),
    # Separate HGVS nomenclature into glvar_seqv1_description column
    glvar_seqv1_description = str_extract(string = glvar_snv_result,
                                         pattern = "(.*)\\s\\d{1,3}%",
                                         group = 1),
    # Remove non-pathogenic BRCA1 variant from sample 24030433 which also
    # has a pathogenic BRCA2 variant
    glvar_seqv1_description = case_when(
      genotype == "BRCA2 c.4276dup p.(Thr1426AsnfsTer12) 48%; BRCA1 c.5074+13C>A 43%; CNV Analysis Failed" ~"BRCA2 c.4276dup p.(Thr1426AsnfsTer12)",
      TRUE ~glvar_seqv1_description
    ),
    glvar_seqv1_description = trimws(glvar_seqv1_description, which = "left"),
    # glvar_icnv1_description is used in the iGene results to describe CNVs
    glvar_icnv1_description = str_extract(string = glvar_cnv_result,
                                  pattern = ".*Ex.*")
    ) |> 
  left_join(glvar_classifications,
             by = "glvar_seqv1_description") |> 
  mutate(glvar_icnv1_classification = case_when(
      glvar_icnv1_description == " BRCA1 Ex02 deletion" ~"Pathogenic",
      glvar_icnv1_description == " RAD51D Exon 1 to Exon 8 deletion" ~"Likely pathogenic",
    TRUE ~NA
  ))

samples_with_gl_sn_variants <- glvar_dnadb_classifications |> 
  filter(!is.na(glvar_seqv1_description))

samples_with_gl_cn_variants <- glvar_dnadb_classifications |> 
  filter(!is.na(glvar_icnv1_description))

# Check all variants have a classification
stopifnot(anyNA(samples_with_gl_sn_variants$glvar_seqv1_classification) == FALSE)

stopifnot(anyNA(samples_with_gl_cn_variants$glvar_icnv1_classification) == FALSE)

```

Add headline result to DNA Database germline results.

```{r}
#| label: add-headline-to-glvar

glvar_dnadb_cleaned <- glvar_dnadb_classifications |> 
  mutate(glvar_headline_result = case_when(
    genotype %in% c("No pathogenic variant identified; No relevant CNV identified",
                    "No pathogenic variant identified; CNV Analysis Failed") ~"No reportable variant(s) detected",
    genotype %in% c("Fail") ~"Analysis failed (see quality score)",
    glvar_seqv1_classification %in% c("Pathogenic", "Likely pathogenic",
                                "Uncertain significance") ~"Reportable variant(s) detected",
    glvar_seqv1_classification == "Not reported" ~"No reportable variant(s) detected",
    glvar_icnv1_classification %in% c("Pathogenic", "Likely pathogenic") ~"Reportable variant(s) detected",
    # Specify headline for 18028742
    (glvar_snv_result == "No pathogenic variant identified" &
      glvar_cnv_result == " No pathogenic variant identified") ~"No reportable variant(s) detected"))

stopifnot(anyNA(glvar_dnadb_cleaned$glvar_headline_result) == FALSE)

```

### Tumour BRCA testing

Add variant classifications to DNA Database tumour results.

```{r}
#| label: add-classifications-to-tvar

tvar_classifications <- read_csv(paste0(initial_folder,
                                        "tvar_classifications.csv"),
                                 show_col_types = FALSE)

stopifnot(anyDuplicated(tvar_classifications$tvar_seqv1_description) == 0)

tvar_dnadb_classifications <- tvar_dnadb_extracted |> 
  mutate(tvar_seqv1_description = str_extract(string = genotype,
                                             pattern = "(.*)\\s\\d{1,3}%",
                                             group = 1),
         # Add variant percentage
         tvar_seqv1_state = str_extract(string = genotype,
                                        pattern = ".*\\s(\\d{1,3})%",
                                        group = 1)) |> 
  left_join(tvar_classifications, by = "tvar_seqv1_description")

samples_with_tumour_variants <- tvar_dnadb_classifications |> 
  filter(!is.na(tvar_seqv1_description))

stopifnot(anyNA(samples_with_tumour_variants$tvar_seqv1_description) == FALSE)

```

This splits the "genotype" column into separate columns. One sample has a pathogenic *BRAF* and a pathogenic *TP53* variant in the genotype column. As neither as *BRCA* variants I have not created a separate column for the second variant.

```{r}
#| label: tvar-dnadb-genotype-column-splitting

tvar_dnadb_genotype_tbl <- tvar_dnadb_classifications |> 
  filter(!is.na(tvar_seqv1_description)) |> 
  select(genotype, tvar_seqv1_description, tvar_seqv1_state, tvar_seqv1_classification)

knitr::kable(tvar_dnadb_genotype_tbl)

```

Add headline result to DNA Database tumour variant results.

```{r}
#| label: add-headline-to-tvar

no_path_var_strings <- unique(grep(pattern = "no\\spathogenic",
            x = tvar_dnadb_extracted$genotype,
            ignore.case = TRUE,
            value = TRUE))

fail_strings <- c("Analysis failed", "Fail")

tvar_dnadb_cleaned <- tvar_dnadb_classifications |> 
  mutate(tvar_headline_result = case_when(
    genotype %in% no_path_var_strings ~"No reportable variant(s) detected",
    genotype %in% fail_strings ~"Analysis failed (see quality score)",
    tvar_seqv1_classification %in% c("Pathogenic", "Likely pathogenic",
                                "Uncertain significance") ~"Reportable variant(s) detected",
    tvar_seqv1_classification == "Not reported" ~"No reportable variant(s) detected"))

stopifnot(anyNA(tvar_dnadb_cleaned$tvar_headline_result) == FALSE)

```

Export cleaned data.

```{r}
#| label: export-dnadb-cleaned-results

write_csv(glvar_dnadb_cleaned,
          paste0(cleaned_folder,
                 "glvar_dnadb_cleaned.csv"))

write_csv(tvar_dnadb_cleaned,
          paste0(cleaned_folder,
                 "tvar_dnadb_cleaned.csv"))

```

## Bind data from DNA Database and iGene

Identify patients which have results on DNA Database and iGene.

```{r}
#| label: patients-on-both-dbs

igene_nhsno <- c(unique(glvar_igene_extracted$nhsno),
                 unique(tvar_igene_extracted$nhsno))

dnadb_nhsno <- c(unique(tvar_dnadb_cleaned$nhsno),
                 unique(glvar_dnadb_cleaned$nhsno))

```

There are `r length(intersect(igene_nhsno, dnadb_nhsno))` patients with results on both DNA Database and iGene.

In order to join the DNA Database and iGene data, they must have the same column names.

```{r}
#| label: prepare-igene-data-for-bind

patient_id_df <- connect_to_lazy_tbl(table = "Samples") |> 
  select(i_gene_r_no, labno, pathno) |> 
  collect() |> 
  rename(rno = i_gene_r_no) |> 
  filter(!duplicated(rno))

glvar_igene_for_bind <- glvar_igene_extracted |>
  rename(rno = referral_number) |> 
  mutate(data_source = "igene",
         genotype = "") |> 
  # Add pathology number
  left_join(patient_id_df,
            by = "rno",
            relationship = "many-to-one") |> 
  relocate(nhsno, labno, rno, pathno, data_source, .before = test_order_date)

stopifnot(nrow(glvar_igene_for_bind) == nrow(glvar_igene_extracted))

tvar_igene_for_bind <- tvar_igene_extracted |> 
  rename(rno = referral_number) |> 
  mutate(data_source = "igene",
         genotype = "") |> 
  # Add pathology number
  left_join(patient_id_df,
            by = "rno",
            relationship = "many-to-one") |> 
  relocate(nhsno, labno, rno, pathno, data_source, .before = test_order_date)

stopifnot(nrow(tvar_igene_for_bind) == nrow(tvar_igene_extracted))

```

Add empty iGene columns to DNA Database germline data.

```{r}
#| label: prepare-glvar-dnadb-for-bind

glvar_dnadb_for_bind <- glvar_dnadb_cleaned |> 
  left_join(patient_id_df, 
            by = "labno",
            relationship = "many-to-one") |> 
  mutate(data_source = "dnadb",
         # Add empty columns for bind
         test_order_date = NA,
         test_identifier = NA,
         glvar_seqv1_state = NA,
         glvar_seqv1_genomic_coordinates = NA,
         glvar_seqv1_evidence = NA,
         glvar_reflex_test = NA,
         glvar_analyst_comments = NA,
         glvar_incidental_finding = NA,
         glvar_panel_coverage = NA,
         glvar_seqv1_inheritance = NA,
         glvar_quality_score = NA,
         glvar_checker_comments = NA,
         glvar_icnv1_evidence = NA,
         glvar_icnv1_state = NA,
         glvar_icnv1_inheritance = NA,
         glvar_icnv1_genomic_coordinates = NA
         ) |> 
  select(
    # Identifiers
    nhsno, labno, rno, pathno,
    # Test information
    data_source, test_order_date, test_identifier, 
    # Result information
    glvar_seqv1_state, glvar_seqv1_genomic_coordinates, glvar_seqv1_evidence, 
    glvar_reflex_test, glvar_analyst_comments, glvar_headline_result, 
    glvar_incidental_finding, glvar_panel_coverage, 
    glvar_seqv1_inheritance, glvar_seqv1_description, 
    glvar_seqv1_classification, glvar_quality_score, 
    glvar_checker_comments, glvar_icnv1_classification, 
    glvar_icnv1_evidence, glvar_icnv1_description, glvar_icnv1_state, 
    glvar_icnv1_inheritance, glvar_icnv1_genomic_coordinates, genotype)

stopifnot(nrow(glvar_dnadb_for_bind) == nrow(glvar_dnadb_cleaned))

```

Add empty iGene columns to DNA Database tumour variant data.

```{r}
#| label: prepare-tvar-dnadb-for-bind

tvar_dnadb_for_bind <- tvar_dnadb_cleaned |> 
  left_join(patient_id_df, 
            by = "labno",
            relationship = "many-to-one") |> 
  mutate(data_source = "dnadb",
         test_order_date = NA, 
         test_identifier = NA, 
         tvar_analyst_comments = NA, 
         tvar_failed_hotspots = NA, 
         tvar_panel_coverage = NA, 
         tvar_reflex_test = NA, 
         tvar_quality_score = NA, 
         tvar_seqv1_genomic_coordinates = NA, 
         tvar_checker_comments = NA, 
         tvar_icnv1_classification = NA, 
         tvar_icnv1_description = NA, 
         tvar_icnv1_state = NA, 
         tvar_icnv1_genomic_coordinates = NA, 
         tvar_seqv2_description = NA, 
         tvar_seqv2_classification = NA, 
         tvar_seqv2_state = NA, 
         tvar_seqv2_genomic_coordinates = NA, 
         tvar_incidental_finding = NA, 
         tvar_seqv1_evidence = NA,
         tvar_sv1_classification = NA,
         tvar_sv1_evidence = NA,          
         tvar_sv1_state = NA,
         tvar_sv1_description = NA,       
         tvar_sv1_genomic_coordinates = NA) |> 
  select(nhsno, labno, rno, pathno,
         data_source, test_order_date, 
         test_identifier, tvar_panel_coverage, tvar_failed_hotspots, 
         tvar_quality_score, tvar_headline_result, tvar_reflex_test, 
         tvar_analyst_comments, tvar_checker_comments, tvar_seqv2_state, 
         tvar_seqv1_state, tvar_seqv1_classification, tvar_seqv2_description,
         tvar_seqv2_classification, tvar_seqv1_description, 
         tvar_seqv1_genomic_coordinates, tvar_icnv1_genomic_coordinates, 
         tvar_icnv1_description, tvar_icnv1_classification, 
         tvar_icnv1_state, tvar_incidental_finding, 
         tvar_seqv2_genomic_coordinates, tvar_seqv1_evidence, 
         tvar_sv1_classification, tvar_sv1_evidence, tvar_sv1_state, 
         tvar_sv1_description, tvar_sv1_genomic_coordinates, genotype)

stopifnot(nrow(tvar_dnadb_for_bind) == nrow(tvar_dnadb_cleaned))

```

### Germline BRCA testing

Bind iGene and DNA Database germline data.

```{r}
#| label: bind-and-annotate-glvar-data

glvar_dnadb_igene_bound <- rbind(glvar_dnadb_for_bind,
                                    glvar_igene_for_bind)

gl_genes <- c("BRCA1", "BRCA2", "BRIP1", "PALB2", "RAD51D", "RAD51C",
              "MSH2", "MSH6", "CHEK2")

gl_gene_regex <- paste0(".*(", paste0(gl_genes, collapse = "|"), ").*")

glvar_dnadb_igene_bound_genes <- glvar_dnadb_igene_bound |> 
  mutate(gl_snv_gene = str_extract(string = glvar_seqv1_description,
                                 pattern = gl_gene_regex,
                                 group = 1),
       gl_cnv_gene = str_extract(string = glvar_icnv1_description,
                                 pattern = gl_gene_regex,
                                 group = 1),
       gl_gene = case_when(
         is.na(gl_snv_gene) & !is.na(gl_cnv_gene) ~gl_cnv_gene,
         !is.na(gl_snv_gene) & is.na(gl_cnv_gene) ~gl_snv_gene
       ),
       glvar_seqv1_classification = case_when(
         # Likely pathogenic reduced penetrance
         glvar_seqv1_description == "NM_000059.3(BRCA2):c.9302T>G p.(Leu3101Arg)" ~"Likely pathogenic",
         TRUE ~glvar_seqv1_classification
       ),
       # Add column to summarise SNV and CNV classifications
       glvar_headline_classification = case_when(
         !is.na(glvar_seqv1_classification) ~glvar_seqv1_classification,
         !is.na(glvar_icnv1_classification) ~glvar_icnv1_classification,
         TRUE ~NA), 
       glvar_headline_classification = factor(glvar_headline_classification,
                                              levels = c("Pathogenic",
                                                         "Likely pathogenic",
                                                         "Uncertain significance",
                                                         "Not reported",
                                                         NA)))

samples_with_gl_variants <- glvar_dnadb_igene_bound_genes |> 
  filter(glvar_headline_result == "Reportable variant(s) detected")

stopifnot(anyNA(samples_with_gl_variants$gl_gene) == FALSE)
stopifnot(anyNA(samples_with_gl_variants$glvar_headline_classification) == FALSE)

```

Filter to one result per patient.

```{r}
#| label: filter-glvar-orpp

glvar_dnadb_igene_bound_orpp <- glvar_dnadb_igene_bound_genes |> 
  filter(!is.na(nhsno)) |> 
  mutate(glvar_headline_result = factor(glvar_headline_result,
                                        levels = c("Reportable variant(s) detected",
                                                   "No reportable variant(s) detected",
                                                   "Analysis failed (see quality score)"))) |> 
  arrange(nhsno, glvar_headline_result) |> 
  filter(!duplicated(nhsno))

stopifnot(anyNA(glvar_dnadb_igene_bound_orpp$nhsno) == FALSE)

# Some samples have multiple results with inconclusive results. 
# Check that the conclusive results have been selected for 3 samples.

stopifnot(nrow(glvar_dnadb_igene_bound_orpp |> 
                 filter(labno == "24024388" &
                          glvar_headline_result == "No reportable variant(s) detected")) == 1)

stopifnot(nrow(glvar_dnadb_igene_bound_orpp |> 
  filter(rno == "R24-1J8H" &
           glvar_headline_result == "No reportable variant(s) detected")) == 1)

stopifnot(nrow(glvar_dnadb_igene_bound_orpp |> 
                 filter(labno == "24030686" &
                          glvar_headline_result == "Reportable variant(s) detected")) == 1)

```

### Tumour BRCA testing

Bind iGene and DNA Database tumour variant data.

```{r}
#| label: bind-and-annotate-tlvar-data

tvar_dnadb_igene_bound <- rbind(tvar_dnadb_for_bind,
                                tvar_igene_for_bind)

tvar_genes <- c("BRCA1", "BRCA2", "KRAS", "BRAF", "ERBB2", "TP53")

tvar_gene_regex <- paste0(".*(", paste0(tvar_genes, collapse = "|"), ").*")

tvar_dnadb_igene_bound_genes <- tvar_dnadb_igene_bound |> 
  mutate(
    tvar_gene1 = str_extract(string = tvar_seqv1_description,
                            pattern = tvar_gene_regex,
                            group = 1),
    tvar_gene2 = str_extract(string = tvar_seqv2_description,
                            pattern = tvar_gene_regex,
                            group = 1),
    tvar_headline_classification = case_when(
      !is.na(tvar_seqv1_classification) ~tvar_seqv1_classification,
      !is.na(tvar_icnv1_classification) ~tvar_icnv1_classification,
      TRUE ~NA
    ),
    tvar_seqv1_percent = parse_number(tvar_seqv1_state),
    tvar_seqv2_percent = parse_number(tvar_seqv2_state))

samples_with_t_variants <- tvar_dnadb_igene_bound_genes |> 
  filter(!is.na(tvar_seqv1_description))

stopifnot(anyNA(samples_with_t_variants$tvar_gene1) == FALSE)
stopifnot(anyNA(samples_with_t_variants$tvar_seqv1_percent) == FALSE)

```

Filter tumour data to one result per patient.

```{r}
#| label: filter-tvar-orpp

tvar_dnadb_igene_bound_orpp <- tvar_dnadb_igene_bound_genes |> 
  filter(!is.na(nhsno)) |> 
  mutate(tvar_headline_result = factor(tvar_headline_result,
                                        levels = c("Reportable variant(s) detected",
                                                   "No reportable variant(s) detected",
                                                   "Analysis failed (see quality score)"))) |> 
  arrange(nhsno, tvar_headline_result) |> 
  filter(!duplicated(nhsno)) 

```

Perform checks on data.

```{r}
#| label: igene-dnadb-bind-checks

stopifnot(nrow(tvar_dnadb_igene_bound_orpp |> 
       filter(labno == "24009901" &
                tvar_headline_result == "No reportable variant(s) detected")) == 1)

stopifnot(nrow(tvar_dnadb_igene_bound_orpp |> 
                 filter(rno == "R24-1E83" &
                          tvar_headline_result == "Reportable variant(s) detected")) == 1)

stopifnot(nrow(tvar_dnadb_igene_bound_orpp |> 
                 filter(labno == "23060393" &
                          tvar_headline_result == "Reportable variant(s) detected")) == 1)

```

Export data.

```{r}
#| label: export-igene-dnadb-data

write_csv(glvar_dnadb_igene_bound_orpp,
          paste0(cleaned_folder,
                 "glvar_dnadb_igene_bound_orpp.csv"))

write_csv(tvar_dnadb_igene_bound_orpp,
          paste0(cleaned_folder,
                 "tvar_dnadb_igene_bound_orpp.csv"))

```

## Join data from iGene, DNA Database and csv files

Now the datasets can be joined together for analysis. There are different ways in which the data can be joined:

-   At the patient level (by NHS number)

-   At the referral level (by iGene R number)

-   At the sample level (by DNA lab number)

Join GI and germline variant data by NHS number.

```{r}
#| label: join-gi-glvar-nhsno

gi_csv_cleaned_orpp_for_join <- gi_csv_cleaned_orpp |> 
  rename(gi_labno = labno,
         gi_pathno = pathno) 

glvar_dnadb_igene_bound_orpp_for_join <- glvar_dnadb_igene_bound_orpp |> 
  rename(glvar_labno = labno,
         glvar_genotype = genotype)

gi_glvar_joined <- gi_csv_cleaned_orpp_for_join |> 
  inner_join(glvar_dnadb_igene_bound_orpp_for_join,
            by = "nhsno",
            relationship = "one-to-one") 

```

Join GI and tumour variant data by DNA lab number and NHS number.

```{r}
#| label: join-gi-tvar

tvar_dnadb_igene_bound_orpp_for_join <- tvar_dnadb_igene_bound_orpp |> 
  rename(tvar_labno = labno,
         tvar_genotype = genotype,
         tvar_pathno = pathno)

gi_tvar_joined_by_labno <- gi_csv_cleaned_orpp_for_join |> 
  inner_join(tvar_dnadb_igene_bound_orpp_for_join,
             join_by("gi_labno" == "tvar_labno"),
             relationship = "one-to-one") 

gi_tvar_joined_by_nhsno <- gi_csv_cleaned_orpp_for_join |> 
  inner_join(tvar_dnadb_igene_bound_orpp_for_join,
             by = "nhsno",
             relationship = "one-to-one")

gi_tvar_joined_by_rno <- gi_csv_cleaned_orpp_for_join |> 
  inner_join(tvar_dnadb_igene_bound_orpp_for_join,
             by = "rno",
             relationship = "one-to-one") 

gi_tvar_joined_by_pathno <- gi_csv_cleaned_orpp_for_join |> 
  filter(!is.na(gi_pathno)) |> 
  inner_join(tvar_dnadb_igene_bound_orpp_for_join |> 
               filter(!is.na(tvar_pathno)),
             join_by("gi_pathno" == "tvar_pathno"),
             relationship = "one-to-one") 

```

Join tumour variant and germline variant data by NHS number.

```{r}
#| label: join-tvar-glvar

glvar_tvar_joined <- glvar_dnadb_igene_bound_orpp |> 
  inner_join(tvar_dnadb_igene_bound_orpp,
             by = "nhsno",
             relationship = "one-to-one")

```

Export joined data to folder.

```{r}
#| label: export-joined-data

write_csv(gi_glvar_joined,
          paste0(joined_folder,
                 "gi_glvar_joined.csv"))

write_csv(gi_tvar_joined_by_labno,
          paste0(joined_folder,
                 "gi_tvar_joined_by_labno.csv"))

write_csv(gi_tvar_joined_by_nhsno,
          paste0(joined_folder,
                 "gi_tvar_joined_by_nhsno.csv"))

write_csv(gi_tvar_joined_by_rno,
          paste0(joined_folder,
                 "gi_tvar_joined_by_rno.csv"))

write_csv(glvar_tvar_joined,
          paste0(joined_folder,
                 "glvar_tvar_joined.csv"))

```

# Results

## Figures and Tables

I have included summary tables and figures for the final dataset. 
Several plots relate to germline testing so I have set the code not to evaluate.
These figures can be rendered in the next phase of the project.

```{r}
#| label: tbl-gi-results
#| echo: TRUE
#| tbl-cap: "All SeqOne GI results (one result per patient)"

tbl_gi_orps <- gi_csv_cleaned_orps |> 
  group_by(status) |> 
  summarise(n = n()) |> 
  mutate("Percentage samples (%)" = (round((n / sum(n))*100, 1))) |> 
  rename("Samples" = n)

tbl_gi_orpp <- gi_csv_cleaned_orpp |> 
  group_by(status) |> 
  summarise(n = n()) |> 
  mutate("Percent (%)" = (round((n / sum(n))*100, 1))) |> 
  rename("Patients" = n)

knitr::kable(tbl_gi_orpp |> 
               rename("GI status" = status) |> 
               adorn_totals())

```

```{r}
#| label: tbl-gi-tvar-all-results
#| tbl-cap: "Patients with GI and tumour variant results on selected PanSolid panels"
#| echo: TRUE

tvar_labno_all_results <- gi_tvar_joined_by_labno |> 
  group_by(data_source) |> 
  count() |> 
  rename("Joined by DNA number" = n)

tvar_nhsno_all_results <- gi_tvar_joined_by_nhsno |> 
  group_by(data_source) |> 
  count() |> 
  rename("Joined by NHS number" = n)

tvar_rno_all_results <- gi_tvar_joined_by_rno |> 
  group_by(data_source) |> 
  count() |> 
  rename("Joined by R number" = n)

tvar_all_results <- tvar_labno_all_results |> 
  inner_join(tvar_rno_all_results, by = "data_source") |> 
  inner_join(tvar_nhsno_all_results, by = "data_source") |> 
  rename("Data source" = data_source) |> 
  adorn_totals()

knitr::kable(tvar_all_results)

```

There are `r nrow(gi_tvar_joined_by_nhsno) - nrow(gi_tvar_joined_by_rno)` cases where samples are joined by NHS number but have different iGene referral numbers.

```{r}
#| label: igene-additional-rnos

setdiff(gi_tvar_joined_by_nhsno$rno.x,
        gi_tvar_joined_by_rno$rno)

```

I have checked some of these cases, and they are from situations where either PanSolid NGS testing or SeqOne GI testing failed on the initial sample referral. 
Another sample was then sent (with a different iGene R number) which then had a conclusive result.

I have also generated tables and figures which are not rendered in this final output for brevity, but have included the code for future reference.

```{r}
#| label: gi-glvar-all-results-tbl
#| eval: FALSE

glvar_all_results <- gi_glvar_joined |> 
  group_by(data_source) |> 
  count() |> 
  rename("Joined by NHS number" = n,
         "NGS result data source" = data_source) |> 
  adorn_totals()

knitr::kable(glvar_all_results)

```

```{r}
#| label: conclusive-results

gi_glvar_joined_conclusive <- gi_glvar_joined |> 
  filter(status != "Non-conclusive" &
           glvar_headline_result %in% c("No reportable variant(s) detected",
                                        "Reportable variant(s) detected"))

gi_tvar_joined_conclusive <- gi_tvar_joined_by_labno |> 
  filter(status != "Non-conclusive" &
           tvar_headline_result %in% c("No reportable variant(s) detected",
                                        "Reportable variant(s) detected"))

```

```{r}
#| label: gi-glvar-tbl
#| eval: FALSE

tbl_gi_glvar <- gi_glvar_joined |>
  group_by(status, glvar_headline_result) |> 
  count() |> 
  rename("GI status" = status,
         "Germline result" = glvar_headline_result,
         "Patients" = n) |> 
  adorn_totals()

knitr::kable(tbl_gi_glvar)

```

```{r}
#| label: gi-tvar-tbl
#| eval: FALSE

tbl_gi_tvar <- gi_tvar_joined_by_labno |> 
  group_by(status, tvar_headline_result) |> 
  count() |> 
  rename("Patients" = n,
         "Tumour result" = tvar_headline_result,
         "GI status" = status) |> 
  adorn_totals()

knitr::kable(tbl_gi_tvar)

```

```{r}
#| label: fig-gi-gl-results-variants
#| eval: FALSE
#| fig-cap: "GI results for patients with reportable germline variants"

variant_class_colours <- c("#FF3300",
                           "#FF9900",
                           "#CCCCCC")

gi_glvar_plot <- gi_glvar_joined_conclusive |> 
  filter(glvar_headline_result == "Reportable variant(s) detected") |> 
  ggplot(aes(x = gl_gene, y = score)) +
  geom_jitter(shape = 21, 
              size = 2,
              width = 0.1, 
              alpha = 0.8,
              aes(fill = glvar_headline_classification)) +
  theme_bw() +
  scale_fill_manual(values = variant_class_colours) +
  labs(x = "Germline gene",
       fill = "Variant classification",
       y = "SeqOne GI score")

gi_glvar_plot

```

```{r}
#| label: fig-gi-tvar-results-variants
#| eval: FALSE
#| fig-cap: "GI results for patients with somatic BRCA1/2 variants"

gi_tvar_plot <- gi_tvar_joined_conclusive |> 
  filter(tvar_headline_result == "Reportable variant(s) detected") |>
  filter(tvar_gene1 %in% c("BRCA1","BRCA2")) |> 
  ggplot(aes(x = tvar_gene1,
             y = score)) +
  geom_jitter(shape = 21, aes(fill = tvar_headline_classification),
              width = 0.2) +
  theme_bw() +
  scale_fill_manual(values = c("#FF9900", # Likely pathogenic
                               "#FF3300", # Pathogenic
                               "#FF3300",  # Oncogenic
                               "#CCCCCC"  # Uncertain significance
                               )) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  labs(x = "Tumour gene", y = "SeqOne GI score",
       fill = "Variant classification")

gi_tvar_plot

```

```{r}
#| label: gi-neg-gl-pos
#| eval: FALSE

glvar_neg_gi <- gi_glvar_joined |> 
  filter(glvar_headline_result == "Reportable variant(s) detected") |> 
  filter(status != "Non-conclusive") |> 
  filter(score < 0.5) |> 
  filter(glvar_seqv1_classification %in% c("Pathogenic", "Likely pathogenic"))

```

```{r}
#| label: gi-neg-gl-pos-tbl
#| eval: FALSE

knitr::kable(glvar_neg_gi |> 
               select(rno.x, gi_labno, score, 
                      gl_gene) |> 
               mutate(score = round(score, 2)) |> 
               arrange(gl_gene))

```

```{r}
#| label: tvar-neg-gi-tbl
#| eval: FALSE

tvar_neg_gi <- gi_tvar_joined_conclusive |> 
  filter(tvar_headline_result == "Reportable variant(s) detected") |>
  filter(tvar_gene1 %in% c("BRCA1","BRCA2")) |> 
  filter(score < 0.5) |> 
  select(surname, score, tvar_seqv1_description) |> 
               mutate(score = round(score, 2))

knitr::kable(tvar_neg_gi)

```

```{r}
#| label: glvar-vs-tvar
#| eval: FALSE

glvar_tvar_brca <- glvar_tvar_joined |> 
  filter(!is.na(gl_gene) &
           glvar_seqv1_classification %in% c("Pathogenic",
                                             "Likely pathogenic") &
           tvar_headline_result == "Reportable variant(s) detected") |> 
  select(nhsno, labno.x, labno.y, rno.x, rno.y, gl_gene, glvar_seqv1_description,
         tvar_seqv1_description,
         glvar_seqv1_classification,
         tvar_seqv1_classification) 

```

```{r}
#| label: fig-gi-glvar-histogram
#| eval: FALSE
#| fig-cap: "GI score histogram stratified by germline BRCA status"

gi_glvar_histogram <- gi_glvar_joined_conclusive |> 
  filter(gl_gene %in% c("BRCA1", "BRCA2", NA)) |> 
  ggplot(aes(x = score, y = )) +
  geom_histogram(binwidth = 0.01) +
  facet_wrap(~glvar_headline_result, nrow = 2) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(x = "SeqOne GI score", y = "Number of patients")

gi_glvar_histogram

```

```{r}
#| label: fig-gi-tvar-histogram
#| echo: TRUE
#| fig-cap: "GI score histogram stratified by tumour BRCA status"

gi_tvar_histogram <- gi_tvar_joined_conclusive |> 
  filter(tvar_gene1 %in% c("BRCA1", "BRCA2", NA)) |> 
  ggplot(aes(x = score, y = )) +
  geom_histogram(binwidth = 0.01) +
  facet_wrap(~tvar_headline_result, nrow = 2) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(x = "SeqOne GI score", y = "Number of patients",
       title = "GI score and tumour BRCA1/2 results",
       fill = "")

gi_tvar_histogram

```

```{r}
#| label: gi-tvar-percent
#| echo: TRUE
#| fig-cap: "GI score versus tumour BRCA variant percentage"

gi_tvar_percent_plot <- gi_tvar_joined_conclusive |> 
  filter(tvar_gene1 %in% c("BRCA1", "BRCA2")) |> 
  ggplot(aes(x = tvar_seqv1_percent, y = score)) +
  geom_point(shape = 21, aes(fill = tvar_headline_classification)) +
  scale_fill_manual(values = c("#FF9900", # Likely pathogenic
                               "#FF3300", # Pathogenic
                               "#FF3300",  # Oncogenic
                               "#CCCCCC"  # Uncertain significance
                               )) +
  xlim(0, 100) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(fill = "",
       x = "Tumour variant percent",
       y = "SeqOne GI score")

gi_tvar_percent_plot

```

```{r}
#| label: patients-over-time
#| eval: FALSE
#| fig-cap: "Patients tested on SeqOne service"

gi_data_sum <- gi_csv_cleaned_orpp |> 
  mutate(month = floor_date(date, unit = "month")) |> 
  group_by(month) |> 
  summarise(total = n()) |> 
  mutate(cum_total = cumsum(total))

seqone_timeplot <- ggplot(gi_data_sum, aes(x = month, y = cum_total)) +
  scale_x_datetime(date_breaks = "1 month",
                   date_labels = "%b-%Y") +
  scale_y_continuous(limits = c(0, max(gi_data_sum$cum_total)+50), 
                     breaks = seq(0, max(gi_data_sum$cum_total)+50, by = 100)) +
  geom_line() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, 
                                   vjust = 0.9,
                                   hjust = 0.9)) +
  labs(x = "", y = "Cumulative patients") 

seqone_timeplot

```

```{r}
#| label: gi-score-histogram
#| eval: FALSE

safe_blue <- "#88CCEE"
safe_red <- "#CC6677"
safe_grey <- "#888888"

gi_csv_cleaned_orpp |> 
  filter(status != "Non-conclusive") |> 
  ggplot(aes(x = score, y = )) +
  geom_histogram(binwidth = 0.01, aes(fill = status),
                 colour = "black") +
  scale_fill_manual(values = c(safe_blue, safe_red)) +
  theme_bw() +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  coord_cartesian(ylim = c(0, 40)) +
  theme(legend.position = "bottom") +
  labs(x = "SeqOne GI score",
       y = "Patients",
       title = "Clinical service GI scores",
       fill = "GI status")

```

## Export results in requested format

Check that dataset only includes results between 1st December 2023 and 20th October 2025.

```{r}
#| label: check-date-range

stopifnot(max(gi_tvar_joined_by_nhsno$date) < "2025-10-20 00:00:00")

stopifnot(min(gi_tvar_joined_by_nhsno$date) > "2023-12-01 00:00:00")

# Check for duplicates
stopifnot(anyDuplicated(gi_tvar_joined_by_nhsno$nhsno) == 0)

# Check for EQA samples
stopifnot(length(grep(pattern = "EQA|Sera", 
                      x = gi_tvar_joined_by_nhsno$full_name,
                      ignore.case = TRUE,
                      value = TRUE)) == 0)

```

Add columns to match Rob Morgan's spreadsheet.

```{r}
#| label: add-columns

gi_tvar_joined_by_nhsno_add_columns <- gi_tvar_joined_by_nhsno |> 
  rename(tvar_data_source = data_source) |> 
  arrange(gi_labno) |> 
  mutate(centre = "NWGLH",
         number = row_number(),
         dataset_sent_to_rm = 3,
         sample_received_in_lab = "",
         test_reported = "",
         tat = "",
         patient_age = "",
         histology = "",
         tcc = "",
         gbrca1_2 = "",
         tbrca_tested_by = "Yes")

```

Select required columns.

```{r}
#| label: select-columns

gi_tvar_joined_by_nhsno_select <- gi_tvar_joined_by_nhsno_add_columns |> 
  select(
    gi_labno,
    full_name,
    rno.x, 
    nhsno, 
    date,
    tvar_data_source,
    dataset_sent_to_rm, 
    number,
    centre,
    sample_received_in_lab,
    test_reported,
    tat,
    patient_age,
    histology,
    tcc,
    gbrca1_2,
    tbrca_tested_by,
    tvar_headline_result,
    tvar_gene1,
    tvar_seqv1_description,
    tvar_seqv1_percent,
    tvar_seqv1_classification,
    tvar_gene2,
    tvar_seqv2_description,
    tvar_seqv2_percent,
    tvar_seqv2_classification,
    tvar_icnv1_description,
    tvar_icnv1_state,
    tvar_icnv1_classification,
    # GI results
    coverage,
    pct_mapped_reads,
    lga,
    lpc,
    score,
    status,
    ccne1_cn,
    rad51b_cn
  )

```

The dataset includes variants in the following genes which are not *BRCA1* or *BRCA2*.

```{r}
#| label: non-brca-genes

non_brca_gene_data <- gi_tvar_joined_by_nhsno_select |> 
  filter(!tvar_gene1 %in% c("BRCA1", "BRCA2", NA))

unique(non_brca_gene_data$tvar_gene1)

```

Remove data for variants in genes which aren't *BRCA1* or *BRCA2*.

```{r}
#| label: remove-non-brca-gene-info

gi_tvar_joined_by_nhsno_brca_only <- gi_tvar_joined_by_nhsno_select |> 
  mutate(
    # SNV 1 data
    tvar_gene1 = case_when(
      !tvar_gene1 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_gene1),
    tvar_seqv1_description = case_when(
      !tvar_gene1 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv1_description),
    tvar_seqv1_percent = case_when(
      !tvar_gene1 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv1_percent),
    tvar_seqv1_classification = case_when(
      !tvar_gene1 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv1_classification),
    # SNV 2 data
    tvar_gene2 = case_when(
      !tvar_gene2 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_gene2),
    tvar_seqv2_description = case_when(
      !tvar_gene2 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv2_description),
    tvar_seqv2_percent = case_when(
      !tvar_gene2 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv2_percent),
    tvar_seqv2_classification = case_when(
      !tvar_gene2 %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_seqv2_classification),
    # CNV data
    tvar_icnv1_state = case_when(
      !tvar_icnv1_description %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_icnv1_state
    ),
    tvar_icnv1_classification = case_when(
      !tvar_icnv1_description %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_icnv1_classification
    ),
    tvar_icnv1_description = case_when(
      !tvar_icnv1_description %in% c("BRCA1", "BRCA2") ~NA,
      TRUE ~tvar_icnv1_description
    )) 

# 24005273 - KRAS variant
stopifnot(nrow(gi_tvar_joined_by_nhsno_brca_only |> 
                 filter(gi_labno == "24005273" &
                          is.na(tvar_gene1))) == 1)

# 25030704 - TP53 variant
stopifnot(nrow(gi_tvar_joined_by_nhsno_brca_only |> 
                 filter(gi_labno == "25030704" &
                          is.na(tvar_gene2))) == 1)

# 24062986 - ERBB2 amplification
stopifnot(nrow(gi_tvar_joined_by_nhsno_brca_only |> 
                 filter(gi_labno == "24062986" &
                          is.na(tvar_icnv1_description))) == 1)


```

Remove patient identifiers, but also keep a backup data copy including patient identifiers in case this is required in future.
Only the dataset **without** patient identifiers will be sent to Dr Morgan.

```{r}
#| label: remove-identifiers

final_dataset_patient_ids <- gi_tvar_joined_by_nhsno_brca_only

final_dataset_patient_ids_removed <- final_dataset_patient_ids |> 
  select(-c(gi_labno, full_name, rno.x, nhsno,  date, tvar_data_source))

```

Export the final dataset.

```{r}
#| label: export-final-dataset

write_csv(final_dataset_patient_ids,
          paste0(joined_folder, "final_dataset_patient_ids.csv"))

write_csv(final_dataset_patient_ids_removed,
          paste0(joined_folder, "final_dataset_patient_ids_removed.csv"))

```

I have performed spot checks on the following samples to check that the results match those in DNA Database and iGene.

24069071, 25023434, 25012444, 25045737, 24013968, 25003285, 24012711, 25029049, 25038927, 24040237, 24014817, 25002153, 24056470, 25001726, 23060393

# Conclusion

`r nrow(final_dataset_patient_ids_removed)` results have been identified which meet the data request criteria.

-   This data is for patients only. EQA samples and control samples are excluded.

-   There is only one result per patient. Patients with multiple results have the conclusive results selected over inconclusive results.

-   Patients without NHS numbers have been excluded.

-   The data was collected between `r format.Date(x = min(final_dataset_patient_ids$date), format = "%d %B %Y")` and `r format.Date(x = max(final_dataset_patient_ids$date), format = "%d %B %Y")`.

-   Variant information for genes other than *BRCA1* and *BRCA2* has been removed from the final output.

-   For samples with results on iGene, only samples with somatic variant testing performed on the M2_tBRCA_PS, M2_tBRCA_PS v2.a and M2_tBRCA_PS v2.b panels have been included.
